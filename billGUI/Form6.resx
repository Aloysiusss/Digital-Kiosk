<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AD/+AAB//gAA//8BgP//g8H//8PD///H4/8=
</value>
  </data>
</root>