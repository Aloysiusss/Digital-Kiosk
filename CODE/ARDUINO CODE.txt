#include <SoftwareSerial.h>

const int coinPin = 3;         // Coin acceptor input pin
const int billPin = 2;         // Bill acceptor input pin
const int relayPin = 7;        // Optional, for future control
const int relaySolenoidPin = 6; 

volatile int coinPulseCount = 0;
volatile int billPulseCount = 0;

unsigned long lastBillPulseTime = 0;
unsigned long lastCoinPulseTime = 0;

int totalCoinAmount = 0;
int totalBillAmount = 0;
bool receiptPrinted = false;
bool systemActive = false;  // NEW FLAG

SoftwareSerial printer(11, 10);  // TX, RX for thermal printer

// Receipt data from Form5
String transactions[20];  // Max 20 lines
int transCount = 0;
String totalLine = "";
String timeLine = "";
String transNo = "";
String studentId = "";

// Interrupts
void coinInterrupt() {
  if (systemActive) {
    coinPulseCount++;
    lastCoinPulseTime = millis();
  }
}

void billInterrupt() {
  if (systemActive) {
    billPulseCount++;
    lastBillPulseTime = millis();
  }
}

void setup() {
  pinMode(coinPin, INPUT_PULLUP);
  pinMode(billPin, INPUT_PULLUP);

  //for relay
  pinMode(relayPin, OUTPUT);
  digitalWrite(relayPin, LOW);  //(relay inactive)

  attachInterrupt(digitalPinToInterrupt(coinPin), coinInterrupt, FALLING);
  attachInterrupt(digitalPinToInterrupt(billPin), billInterrupt, FALLING);

  digitalWrite(relaySolenoidPin, HIGH);  // Set first
  pinMode(relaySolenoidPin, OUTPUT);     // Then enable

  Serial.begin(9600);
  printer.begin(9600);

  randomSeed(analogRead(0));
  
  // Reset printer
  printer.write(27); printer.write(64); 
}

void loop() {
  unsigned long currentMillis = millis();

  // Bill detection
  if (billPulseCount > 0 && currentMillis - lastBillPulseTime > 300 ) {
    noInterrupts();
    int pulses = billPulseCount;
    billPulseCount = 0;
    interrupts();

    int insertedBill = pulses * 10;
    totalBillAmount += insertedBill;

    Serial.print("BILL: ");
    Serial.println(totalBillAmount);
  }

  // Coin detection
  if (coinPulseCount > 0 && currentMillis - lastCoinPulseTime > 300) {
    noInterrupts();
    int pulses = coinPulseCount;
    coinPulseCount = 0;
    interrupts();

    int insertedCoin = pulses * 1;
    totalCoinAmount += insertedCoin;

    Serial.print("COIN: ");
    Serial.println(totalCoinAmount);
  }

  // Read commands from Form5
  if (Serial.available() > 0) {
    String command = Serial.readStringUntil('\n');
    command.trim();

    if (command == "reset") {
      totalCoinAmount = 0;
      totalBillAmount = 0;
      coinPulseCount = 0;
      billPulseCount = 0;
      receiptPrinted = false;
      transCount = 0;
      totalLine = "";
      timeLine = "";
      transNo = "";
      studentId = "";
      digitalWrite(relayPin, LOW);  // Turn OFF power
      Serial.println("Counters reset.");
    } 
    else if (command == "power_on") {
      digitalWrite(relayPin, HIGH);  // Turn ON power
      delay(1500);
      systemActive = true;
      Serial.println("Relay turned ON");
    }
    else if (command == "power_off") {
      systemActive = false;
      digitalWrite(relayPin, LOW);   // Turn OFF power
      Serial.println("Relay turned OFF");
    }
    else if (command == "unlock") {
      digitalWrite(relaySolenoidPin, LOW);  // unlock solenoid immediately
      Serial.println("Solenoid UNLOCKED");
    }
    else if (command == "lock") {
      digitalWrite(relaySolenoidPin, HIGH); // lock solenoid immediately
      Serial.println("Solenoid LOCKED");
    }
    else if (command == "print") {
      // if (!receiptPrinted) {
      if (!receiptPrinted && (totalCoinAmount > 0 || totalBillAmount > 0 || transCount > 0)) {
        int totalAmount = totalBillAmount + totalCoinAmount;
        receiptPrinted = true;
        printReceipt(totalAmount);
        printer.flush();
        delay(3000);
      } else {
        Serial.println("Receipt already printed.");
      }
    }
    else if (command.startsWith("TRN|")) {
      if (transCount < 10) {
        transactions[transCount++] = command;
      }
    }
    else if (command.startsWith("TOTAL|")) {
      totalLine = command;
    }
    else if (command.startsWith("TIME|")) {
      timeLine = command;
    }
    else if (command.startsWith("TRANSNO|")) {
      transNo = command.substring(8); //CUSTOM TRANSACTION CODE -- BILL: A(20),B(50),C(100),D(200),E(500),F(1000) and COIN: 1 (1PHP),2(5 PHP),3(10 PHP),4 (20 PHP)
    }
    else if (command.startsWith("STUDENT|")) {
      studentId = command.substring(8); 
    }
  }
  delay(10);
}

//THIS CODE IF FOR THE FORMAT OF RECEIPT CONNECTED TO UI DATA
void printReceipt(int amount) {
  printer.write(27); printer.write(64);  // Reset
  // printer.write(27); printer.write('E'); printer.write(1); // ESC E 1 - Bold ON
  printer.write(27); printer.write(97); printer.write(1);  // Center align
  printer.println("AMA EDUCATION SYSTEM");
  printer.println("ACKNOWLEDGEMENT RECEIPT");
  printer.println("--------------------------------");
  
  printer.write((uint8_t)27); 
  printer.write((uint8_t)97); 
  printer.write((uint8_t)0);  

  if (timeLine != "") {
  // Example: "DATE     : 06/26/2025 11:08:33 AM"
  String fullDateTime = timeLine.substring(5); 
  
  int spaceIndex = fullDateTime.indexOf(' ');
  String datePart = fullDateTime.substring(0, spaceIndex);           
  String timePart = fullDateTime.substring(spaceIndex + 1);          
  
  if (datePart.length() > 10) datePart = datePart.substring(0, 10);
  if (timePart.length() > 11) timePart = timePart.substring(0, 11);
  
  printer.println("DATE              TIME");
  printer.println(datePart + "   " + timePart);
}
  printer.println("Campus    : AMA Quezon City");
  printer.println("Terminal  : KIOSK-01");

  // Generate random Invoice number
  String invoiceNo = String(random(100000, 999999));
  printer.println("Invoice # : " + invoiceNo); 

  //GENERATE DENOMINATION CODE
  String displayTransNo = (transNo != "") ? transNo : String(random(100000, 999999));
  // printer.println("Trans No  : " + displayTransNo);
  
  if (studentId != "") {
    printer.println("Student ID: " + studentId);
  }
  printer.println("");

  // Transaction item
  printer.println("Item              Qty     Amount");
  printer.println("--------------------------------");

  for (int i = 0; i < transCount; i++) {
    String line = transactions[i];
    line.replace("TRN|", ""); 

    // Example: "Tuition x1 = PHP 12000.00"
    int xIndex = line.indexOf('x');
    int eqIndex = line.indexOf('=');
    
    String name = line.substring(0, xIndex - 1);
    String qty = line.substring(xIndex + 1, eqIndex - 1);
    String amt = line.substring(eqIndex + 2);

    name.trim();
    qty.trim();
    amt.trim();

    while (name.indexOf("  ") >= 0) name.replace("  ", " ");

    while (qty.length() < 3) qty = " " + qty;
    while (amt.length() < 10) amt = " " + amt;
    String qtyAmtLine = qty + "   " + amt;

    int maxLineLength = 16;
    while (name.length() > maxLineLength) {
      printer.println(name.substring(0, maxLineLength));
      name = name.substring(maxLineLength);
      name.trim();  
    }

    if (name.length() > 0) {
      while (name.length() < maxLineLength) name += ' ';
      printer.println(name + qtyAmtLine);
    }
  }

  printer.println("--------------------------------");

  String totalAmount = (totalLine != "") ? totalLine.substring(6) : String(amount);
  printer.write((uint8_t)27); printer.write((uint8_t)97); printer.write((uint8_t)0);  
  printer.write((uint8_t)27); printer.write((uint8_t)'E'); printer.write((uint8_t)1);

  String totalLabel = "TOTAL:";
  String totalText = "PHP " + totalAmount;
  int spacesNeeded = 32 - totalLabel.length() - totalText.length();
  String spacer = "";
  for (int i = 0; i < spacesNeeded; i++) spacer += " ";
  printer.println(totalLabel + spacer + totalText);

  printer.write((uint8_t)27); printer.write((uint8_t)'E'); printer.write((uint8_t)0);
  printer.println("--------------------------------");
  String paidLabel = "PAID AMOUNT:";
  String paidText = "PHP " + String((float)(totalBillAmount + totalCoinAmount), 2);
  int paidSpacesNeeded = 32 - paidLabel.length() - paidText.length();
  String paidSpacer = "";
  for (int i = 0; i < paidSpacesNeeded; i++) paidSpacer += " ";
  printer.println(paidLabel + paidSpacer + paidText);

  printer.println("--------------------------------");
  printer.write((uint8_t)27); printer.write((uint8_t)97); printer.write((uint8_t)1);
  printer.println("THANK YOU FOR YOUR PAYMENT");
  // printer.println("Trans No: " + displayTransNo);
  if (displayTransNo != "") {
  printer.println("Trans No: " + displayTransNo);
  }
  printer.println("--------------------------------");
  printer.write(10);  
  printer.write(10);
  printer.write(10);
  printer.write(10);
  printer.write(10);
  printer.write(10);

  printer.flush();
  Serial.println("Receipt printed. Ready to power off.");  
  Serial.println("DONE PRINTING");
  delay(100);
}

